{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Butler documentation\n\n\nButler is an open source add-on tool for Qlik Sense, extending that platform with various features, most of which are focused on integrating Sense with other systems.  \n\n\nAll project files are found \non GitHub\n.\n\n\nUse the menu to the left to access the different parts of the Butler documentation.\n\n\nIf you find errors in the documentation, please \nopen an issue in the GitHub repository\n.\n\nOr \nfork the project\n and contribute with enhancements.\n\n\nGood luck!", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome_to_butler_documentation", 
            "text": "Butler is an open source add-on tool for Qlik Sense, extending that platform with various features, most of which are focused on integrating Sense with other systems.    All project files are found  on GitHub .  Use the menu to the left to access the different parts of the Butler documentation.  If you find errors in the documentation, please  open an issue in the GitHub repository . \nOr  fork the project  and contribute with enhancements.  Good luck!", 
            "title": "Welcome to Butler documentation"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview\n\n\nButler is a Node.js based proxy app for providing add-on features to Qlik Sense.\n\nSome of the features can be used from Sense load scripts, while other provide integration with other systems.\n\n\nThe app started out as a way of posting to \nSlack\n from Qlik Sense load scripts, but has since been generalized and now supports the following high level features:\n\n\n\n\nREST endpoints that can be called from Sense load scripts or external systems.\n\n\nEvent proxies used to forward messages from Sense's logging framework.\n\n\n\n\nREST endpoints\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n/butlerPing\n\n\nDesc\n\n\n\n\n\n\n/createDir\n\n\nCreate directories (anywhere in the file system) on the server where Butler is running\n\n\n\n\n\n\n/createDirQVD\n\n\nCreate directories (relative to a hard coded path) on the server where Butler is running\n\n\n\n\n\n\n/getDiskSpace\n\n\nCheck available disk space\n\n\n\n\n\n\n/mqttPublishMessage\n\n\nPublish message to MQTT topic\n\n\n\n\n\n\n/senseAppDump\n\n\n...\n\n\n\n\n\n\n/senseListApps\n\n\n...\n\n\n\n\n\n\n/senseQRSPing\n\n\n...\n\n\n\n\n\n\n/senseStartTask\n\n\n...\n\n\n\n\n\n\n/slackPostMessage\n\n\nPost to Slack from Sense load scripts\n\n\n\n\n\n\n\n\nHandler for Sense log messages\n\n\nIt is possible to hook into Sense's logging framework, and have log events forwarded to Butler.\n\nOnce there, Butler can act as needed on the messages. Currently Butler forwards some messages to Slack (for notifying humans that some event occurred) and MQTT (for notifying other systems that some event occurred).\n\n\nMQTT handlers\n\n\nMQTT is a light weight pub-sub protocol developed for efficient machine-to-machine message sending. The protocol was developed with embedded systems (IoT and other low CPU/memory systems) in mind, and there are client implementations available in many different languages/platforms. It is also a mature protocol that has proven its stability over many years.  \n\n\nAdding in- and out-bound MQTT support to Sense opens up a very interesting set of possibilities:   \n\n\n\n\nStart Sense tasks when a message arrives in a particular MQTT topic. Other systems can very easily trigger Sense reloads this way. Many cases where upstream sources are today polled can be avoided, with lower server load and more up-to-date data for end users as results.\n\n\nSend MQTT messages from Sense load script, notifying other systems that some set of files have been created and are available for consumption.\n\n\nUse as a real-time debugging channel during development of Sense apps. By sending MQTT messages from the load script, the developer can inspect the value of variables, tables etc during different parts of the reload process.\n\n\n\n\nExtending Butler\n\n\nGiven the richness of the Sense APIs, it is easy to add new REST endpoints that encapsulate API functions of interest.\nOn the other hand, given the vast number of modules in npm, it is quite easy to add integrations to additional services. Current ideas include linking to services like \nPushover\n, sending tweets, controlling USB status lights like \nBlink(1)\n etc.  \n\n\n*\nForward user audit events (session start/stop, connection open/close) to Slack and MQTT", 
            "title": "Overview and features"
        }, 
        {
            "location": "/overview/#overview", 
            "text": "Butler is a Node.js based proxy app for providing add-on features to Qlik Sense. \nSome of the features can be used from Sense load scripts, while other provide integration with other systems.  The app started out as a way of posting to  Slack  from Qlik Sense load scripts, but has since been generalized and now supports the following high level features:   REST endpoints that can be called from Sense load scripts or external systems.  Event proxies used to forward messages from Sense's logging framework.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#rest_endpoints", 
            "text": "Endpoint  Description      /butlerPing  Desc    /createDir  Create directories (anywhere in the file system) on the server where Butler is running    /createDirQVD  Create directories (relative to a hard coded path) on the server where Butler is running    /getDiskSpace  Check available disk space    /mqttPublishMessage  Publish message to MQTT topic    /senseAppDump  ...    /senseListApps  ...    /senseQRSPing  ...    /senseStartTask  ...    /slackPostMessage  Post to Slack from Sense load scripts", 
            "title": "REST endpoints"
        }, 
        {
            "location": "/overview/#handler_for_sense_log_messages", 
            "text": "It is possible to hook into Sense's logging framework, and have log events forwarded to Butler. \nOnce there, Butler can act as needed on the messages. Currently Butler forwards some messages to Slack (for notifying humans that some event occurred) and MQTT (for notifying other systems that some event occurred).", 
            "title": "Handler for Sense log messages"
        }, 
        {
            "location": "/overview/#mqtt_handlers", 
            "text": "MQTT is a light weight pub-sub protocol developed for efficient machine-to-machine message sending. The protocol was developed with embedded systems (IoT and other low CPU/memory systems) in mind, and there are client implementations available in many different languages/platforms. It is also a mature protocol that has proven its stability over many years.    Adding in- and out-bound MQTT support to Sense opens up a very interesting set of possibilities:      Start Sense tasks when a message arrives in a particular MQTT topic. Other systems can very easily trigger Sense reloads this way. Many cases where upstream sources are today polled can be avoided, with lower server load and more up-to-date data for end users as results.  Send MQTT messages from Sense load script, notifying other systems that some set of files have been created and are available for consumption.  Use as a real-time debugging channel during development of Sense apps. By sending MQTT messages from the load script, the developer can inspect the value of variables, tables etc during different parts of the reload process.", 
            "title": "MQTT handlers"
        }, 
        {
            "location": "/overview/#extending_butler", 
            "text": "Given the richness of the Sense APIs, it is easy to add new REST endpoints that encapsulate API functions of interest.\nOn the other hand, given the vast number of modules in npm, it is quite easy to add integrations to additional services. Current ideas include linking to services like  Pushover , sending tweets, controlling USB status lights like  Blink(1)  etc.    *\nForward user audit events (session start/stop, connection open/close) to Slack and MQTT", 
            "title": "Extending Butler"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\nSorry - there is no installer for Butler.\n\nYou will need to work a bit on the command line to set things up.  \n\n\nIt's not as bad as it sounds though, a few pieces of software (most notably \nnode.js\n and some node modules) need to be installed, but the default options should be good to use, at least as of this writing.\n\n\nFollow the \ninstallation and configuration instructions\n - they will guide through the setup process.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting_started", 
            "text": "Sorry - there is no installer for Butler. \nYou will need to work a bit on the command line to set things up.    It's not as bad as it sounds though, a few pieces of software (most notably  node.js  and some node modules) need to be installed, but the default options should be good to use, at least as of this writing.  Follow the  installation and configuration instructions  - they will guide through the setup process.", 
            "title": "Getting started"
        }, 
        {
            "location": "/project-layout/", 
            "text": "Project layout\n\n\nThe GitHub repository consists of the following parts:\n\n\nbutler-docs/              # Main documentation folder, created using MkDocs\n  docs/                   # The configuration file\n    index.md              # The documentation homepage\n    ...                   # Other markdown pages, images and other files.\n\nlog4net_task_failed/      # Logging appender XML file\n  LocalLogConfig.XML      # Forwarding of failed task events\n\nlog4net_user-audit-event/ # Logging appender XML files\n  LocalLogConfig.XML      # Forwarding of session events\n\nsense_script/             # Qlik Sense .qvs script files\n  butler_init.qvs\n  create_directory.qvs\n  post_to_mqtt.qvs\n  post_to_slack.qvs\n\nsrc/                      # Butler source code\n  config/\n  mqtt/\n  qrsUtil/\n  rest/\n  udp/\n  udp_client/\n  butler.js\n  globals.js\n  package.json\n  README.md\n\nREADME.md                 # Main GitHub readme file", 
            "title": "Project layout"
        }, 
        {
            "location": "/project-layout/#project_layout", 
            "text": "The GitHub repository consists of the following parts:  butler-docs/              # Main documentation folder, created using MkDocs\n  docs/                   # The configuration file\n    index.md              # The documentation homepage\n    ...                   # Other markdown pages, images and other files.\n\nlog4net_task_failed/      # Logging appender XML file\n  LocalLogConfig.XML      # Forwarding of failed task events\n\nlog4net_user-audit-event/ # Logging appender XML files\n  LocalLogConfig.XML      # Forwarding of session events\n\nsense_script/             # Qlik Sense .qvs script files\n  butler_init.qvs\n  create_directory.qvs\n  post_to_mqtt.qvs\n  post_to_slack.qvs\n\nsrc/                      # Butler source code\n  config/\n  mqtt/\n  qrsUtil/\n  rest/\n  udp/\n  udp_client/\n  butler.js\n  globals.js\n  package.json\n  README.md\n\nREADME.md                 # Main GitHub readme file", 
            "title": "Project layout"
        }, 
        {
            "location": "/install-config/", 
            "text": "Installation\n\n\nBelow are the general steps needed to install Butler. Please note that you might need to adapt these to your particular system configuration.   \n\n\n\n\n\n\nInstall node.js\n\n  Butler has been developed and tested using the 64 bit version of \nnode.js\n 4.4.6.   \n\n\n\n\n\n\nDecide where to install Butler\n\n  It is usually a good starting point to run Butler on the Sense server. If there are more than one server in the Sense cluster, Butler can be placed on the reload server (as the /createDir endpoint then can be used to create folders in which QVD and other files can be stored).\n  That said, it is quite possible to run Butler on any server, as long as there is network connectivity to the Sense server(s).  \n\n\n\n\n\n\nDownload Butler\n\n  Download the repository zip file or clone the Butler repository using your git tool of choice. Both options achieve the same thing, i.e. a directory such as d:\\node\\butler, which is then Butler's root directory.  \n\n\n\n\n\n\nInstall node dependencies\n\n  From a Windows command prompt (assuming Butler was installed to d:\\node\\butler):  \n\n\nd:\ncd \\node\\butler\\src\nnpm install\n\n\n\nThis will download and install all node.js modules used by Butler.  \n\n\n\n\n\n\nDocumentation dependencies\n\n  If you plan to modify or extend Butler's documentation, you will need to install \nMkDocs\n.\n\n  MkDocs is used to create the pages you are reading right now.\n\n\n\n\n\n\nConfiguration\n\n\nButler uses configuration files in JSON format. The config files are stored in the src\\config folder.\n\nButler comes with a default config file called \ndefault.json\n. Either update it as needed (see below for details), or make a copy of it and call it \nproduction.json\n, then make the needed changes to that file. That way you will not overwrite your customized \ndefault.json\n file if you in the future download updated Butler versions from GitHub.  \n\n\nNote: Butler uses the \nnode-config\n module to handle config files. As per node-config's documentation, to switch to using the production.json config file, at a command prompt type\n\n\nset NODE_ENV=production\n\n\n\nbefore starting Butler with \nnode butler.js\n.\n\n\nConfig file syntax\n\n\nThe \ndefault.json\n config file looks like this:\n\n\n{\n  \nButler\n: {\n    \nslackConfig\n: {\n      \nwebhookURL\n: \nfill in your web hook URL from Slack\n,\n      \nloginNotificationChannel\n: \nfill in name of Slack channel where audit events (login/logoff etc) should be posted\n,\n      \ntaskFailureChannel\n: \nfill in name of Slack channel where task failure events should be posted\n\n    },\n    \nmqttConfig\n: {\n      \nbrokerIP\n: \nIP of MQTT server\n,\n      \ntaskFailureTopic\n: \nqliksense/task_failure\n,\n      \ntaskFailureServerStatusTopic\n: \nqliksense/butler/task_failure_server\n,\n      \nsessionStartTopic\n: \nqliksense/session/start\n,\n      \nsessionStopTopic\n: \nqliksense/session/stop\n,\n      \nconnectionOpenTopic\n: \nqliksense/connection/open\n,\n      \nconnectionCloseTopic\n: \nqliksense/connection/close\n,\n      \ntaskFailureServerStatusTopic\n: \nqliksense/butler/session_server\n\n    },\n    \nudpServerConfig\n: {\n      \nserverIP\n: \nIP of server where Butler is running\n,\n      \nportSessionConnectionEvents\n: 9997,\n      \nportTaskFailure\n: 9998\n    },\n    \nrestServerConfig\n: {\n      \nserverPort\n: 8080\n    },\n    \nqrsConfig\n: {\n      \nqrsServer\n: \nFQDN or IP of Sense server\n,\n      \nqrsServerPort\n: \nPort to connect to, usually 4747\n,\n      \nisSecure\n: \ntrue\n,\n      \nheaders\n: {\n          \nX-Qlik-User\n: \nUserDirectory=Internal;UserId=sa_repository\n\n      },\n      \ncert\n: \nPath to cert file\n,\n      \nkey\n: \nPath to key file\n,\n      \nrejectUnauthorized\n: \nfalse\n\n    }\n  }\n}\n\n\n\n\nComments:\n\n\n\n\n\n\nCurrently Butler assumes that a MQTT broker is present, and that status messages should be sent to Slack. Butler will fail with error messages if it cannot connect to a MQTT server, or if the Slack Webhook URL is not properly set.\n\nFuture versions may make MQTT, Slack and other similar channels optional, using the config file.  \n\n\n\n\n\n\nThe default location cert/key files are found in (assuming a standard install of Sense 2.2.4) C:\\ProgramData\\Qlik\\Sense\\Repository\\Exported Certificates.Local Certificates\n\nThe files to use are \nclient.pem\n and \nclient_key.pem\n. The config file can point straight to these files.", 
            "title": "Installation and configuration"
        }, 
        {
            "location": "/install-config/#installation", 
            "text": "Below are the general steps needed to install Butler. Please note that you might need to adapt these to your particular system configuration.       Install node.js \n  Butler has been developed and tested using the 64 bit version of  node.js  4.4.6.       Decide where to install Butler \n  It is usually a good starting point to run Butler on the Sense server. If there are more than one server in the Sense cluster, Butler can be placed on the reload server (as the /createDir endpoint then can be used to create folders in which QVD and other files can be stored).\n  That said, it is quite possible to run Butler on any server, as long as there is network connectivity to the Sense server(s).      Download Butler \n  Download the repository zip file or clone the Butler repository using your git tool of choice. Both options achieve the same thing, i.e. a directory such as d:\\node\\butler, which is then Butler's root directory.      Install node dependencies \n  From a Windows command prompt (assuming Butler was installed to d:\\node\\butler):    d:\ncd \\node\\butler\\src\nnpm install  This will download and install all node.js modules used by Butler.      Documentation dependencies \n  If you plan to modify or extend Butler's documentation, you will need to install  MkDocs . \n  MkDocs is used to create the pages you are reading right now.", 
            "title": "Installation"
        }, 
        {
            "location": "/install-config/#configuration", 
            "text": "Butler uses configuration files in JSON format. The config files are stored in the src\\config folder. \nButler comes with a default config file called  default.json . Either update it as needed (see below for details), or make a copy of it and call it  production.json , then make the needed changes to that file. That way you will not overwrite your customized  default.json  file if you in the future download updated Butler versions from GitHub.    Note: Butler uses the  node-config  module to handle config files. As per node-config's documentation, to switch to using the production.json config file, at a command prompt type  set NODE_ENV=production  before starting Butler with  node butler.js .", 
            "title": "Configuration"
        }, 
        {
            "location": "/install-config/#config_file_syntax", 
            "text": "The  default.json  config file looks like this:  {\n   Butler : {\n     slackConfig : {\n       webhookURL :  fill in your web hook URL from Slack ,\n       loginNotificationChannel :  fill in name of Slack channel where audit events (login/logoff etc) should be posted ,\n       taskFailureChannel :  fill in name of Slack channel where task failure events should be posted \n    },\n     mqttConfig : {\n       brokerIP :  IP of MQTT server ,\n       taskFailureTopic :  qliksense/task_failure ,\n       taskFailureServerStatusTopic :  qliksense/butler/task_failure_server ,\n       sessionStartTopic :  qliksense/session/start ,\n       sessionStopTopic :  qliksense/session/stop ,\n       connectionOpenTopic :  qliksense/connection/open ,\n       connectionCloseTopic :  qliksense/connection/close ,\n       taskFailureServerStatusTopic :  qliksense/butler/session_server \n    },\n     udpServerConfig : {\n       serverIP :  IP of server where Butler is running ,\n       portSessionConnectionEvents : 9997,\n       portTaskFailure : 9998\n    },\n     restServerConfig : {\n       serverPort : 8080\n    },\n     qrsConfig : {\n       qrsServer :  FQDN or IP of Sense server ,\n       qrsServerPort :  Port to connect to, usually 4747 ,\n       isSecure :  true ,\n       headers : {\n           X-Qlik-User :  UserDirectory=Internal;UserId=sa_repository \n      },\n       cert :  Path to cert file ,\n       key :  Path to key file ,\n       rejectUnauthorized :  false \n    }\n  }\n}  Comments:    Currently Butler assumes that a MQTT broker is present, and that status messages should be sent to Slack. Butler will fail with error messages if it cannot connect to a MQTT server, or if the Slack Webhook URL is not properly set. \nFuture versions may make MQTT, Slack and other similar channels optional, using the config file.      The default location cert/key files are found in (assuming a standard install of Sense 2.2.4) C:\\ProgramData\\Qlik\\Sense\\Repository\\Exported Certificates.Local Certificates \nThe files to use are  client.pem  and  client_key.pem . The config file can point straight to these files.", 
            "title": "Config file syntax"
        }, 
        {
            "location": "/running/", 
            "text": "Running Butler\n\n\nThe easiest way of starting Butler is by using the normal node.js way of starting node apps:\n\n\nd:\ncd \\node\\butler\\src\nnode butler.js\n\n\n\nIt is of course also possible to put those commands in a .bat file and execute that file instead.  \n\n\nProcess monitors\n\n\nAs Butler is the kind of server that (probably) should always be running on a server, it makes sense using a node.js process monitor to keep it alive.\n\n\nPM2\n and \nForever\n are two process monitors that both have been successfully tested with Butler.  \n\n\nOne caveat with these is that it is hard to start them (and thus Butler) at server boot. It's easy to auto-executing the process monitor when a user logs into the server, but having the requirement that you log into the server immediately after server boot is of course less than ideal.\n\nOptions for solving this issue are currently being evaluated and tested.", 
            "title": "Running Butler"
        }, 
        {
            "location": "/running/#running_butler", 
            "text": "The easiest way of starting Butler is by using the normal node.js way of starting node apps:  d:\ncd \\node\\butler\\src\nnode butler.js  It is of course also possible to put those commands in a .bat file and execute that file instead.", 
            "title": "Running Butler"
        }, 
        {
            "location": "/running/#process_monitors", 
            "text": "As Butler is the kind of server that (probably) should always be running on a server, it makes sense using a node.js process monitor to keep it alive.  PM2  and  Forever  are two process monitors that both have been successfully tested with Butler.    One caveat with these is that it is hard to start them (and thus Butler) at server boot. It's easy to auto-executing the process monitor when a user logs into the server, but having the requirement that you log into the server immediately after server boot is of course less than ideal. \nOptions for solving this issue are currently being evaluated and tested.", 
            "title": "Process monitors"
        }, 
        {
            "location": "/rest/", 
            "text": "REST API\n\n\nButler's \nREST API\n serves several purposes. \n\nThe main purpose of Butler's REST API is to allow various tasks to be carried out/started from a Sense load script, but the REST API can also be used by external systems (outside of the Sense environment) to communicate with Sense. The main areas are:  \n\n\n\n\n\n\nProvide convenient and easy access to select Sense APIs\n \n\nButler handles all authentication needed to talk to the Sense APIs, as well as combining multiple calls to Sense APIs, offering more high level features than those offered by Sense natively.\n\n\n\n\n\n\nStart Sense tasks\n\nExternal systems (outside of Sense) can trigger Sense tasks (e.g. reload tasks). This way a database can trigger an app reload when new data is available in the database. Or a Sense load script can trigger other tasks when the execution of the script reaches certain points in the script.\n\n\n\n\n\n\nSend MQTT messages\n\nButler enables Sense load scripts to send \nMQTT\n messages. MQTT is a very stable and widely adopted \nm2m communication\n protocol, with client libraries available in many different languages.\n\n\n\n\n\n\nStart Sense tasks when MQTT messages arrive\n \n\nButler subscribes to a certain (configurable) MQTT topic, and starts Sense tasks based on messages received in that topic.\n\n\n\n\n\n\nSend messages to Slack and other 3rd party services\n \n\nIntegrating \nSlack\n with Sense has proven extremely useful. \n\nFrom within a Sense load script it is possible to write progress info for long running reloads to Slack, notifying users that a reload has finished, notifying sysadmins that a reload has encountered some error condition etc.\n\nAs Slack works really well across both desktop and mobile devices, Sense will benefit that cross platform feature too.  \n\n\n\n\n\n\nThe Slack integration supports Slack's full markdown message formatting as well as \nemoijs\n.\n\n\nREST API endpoints", 
            "title": "REST API"
        }, 
        {
            "location": "/rest/#rest_api", 
            "text": "Butler's  REST API  serves several purposes.  \nThe main purpose of Butler's REST API is to allow various tasks to be carried out/started from a Sense load script, but the REST API can also be used by external systems (outside of the Sense environment) to communicate with Sense. The main areas are:      Provide convenient and easy access to select Sense APIs   \nButler handles all authentication needed to talk to the Sense APIs, as well as combining multiple calls to Sense APIs, offering more high level features than those offered by Sense natively.    Start Sense tasks \nExternal systems (outside of Sense) can trigger Sense tasks (e.g. reload tasks). This way a database can trigger an app reload when new data is available in the database. Or a Sense load script can trigger other tasks when the execution of the script reaches certain points in the script.    Send MQTT messages \nButler enables Sense load scripts to send  MQTT  messages. MQTT is a very stable and widely adopted  m2m communication  protocol, with client libraries available in many different languages.    Start Sense tasks when MQTT messages arrive   \nButler subscribes to a certain (configurable) MQTT topic, and starts Sense tasks based on messages received in that topic.    Send messages to Slack and other 3rd party services   \nIntegrating  Slack  with Sense has proven extremely useful.  \nFrom within a Sense load script it is possible to write progress info for long running reloads to Slack, notifying users that a reload has finished, notifying sysadmins that a reload has encountered some error condition etc. \nAs Slack works really well across both desktop and mobile devices, Sense will benefit that cross platform feature too.      The Slack integration supports Slack's full markdown message formatting as well as  emoijs .", 
            "title": "REST API"
        }, 
        {
            "location": "/rest/#rest_api_endpoints", 
            "text": "", 
            "title": "REST API endpoints"
        }, 
        {
            "location": "/log-events/", 
            "text": "", 
            "title": "Log event handlers"
        }, 
        {
            "location": "/mqtt/", 
            "text": "", 
            "title": "MQTT integration"
        }, 
        {
            "location": "/tools-used/", 
            "text": "Tools used to create Butler\n\n\nBelow follows a (most likely non complete) list of tools that were used to create Butler.\n\nIt is intended to serve as a reminder to self for how to carry out various tasks, some of which may only be occasionally used.\nThus, please treat this page for what it is...\n\n\n\n\nSyntax checking and linting: \nESLint\n\n\nConfig files in node.js: \nnode-config\n\n\nCommand line parameter parsing in node.js: \nyargs", 
            "title": "Tools used"
        }, 
        {
            "location": "/tools-used/#tools_used_to_create_butler", 
            "text": "Below follows a (most likely non complete) list of tools that were used to create Butler. \nIt is intended to serve as a reminder to self for how to carry out various tasks, some of which may only be occasionally used.\nThus, please treat this page for what it is...   Syntax checking and linting:  ESLint  Config files in node.js:  node-config  Command line parameter parsing in node.js:  yargs", 
            "title": "Tools used to create Butler"
        }
    ]
}